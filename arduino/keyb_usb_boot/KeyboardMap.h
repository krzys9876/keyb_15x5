#include "HID-Project.h"

#define ROWS 5 // IN
#define COLS 15 // OUT
#define COL_PINS 4 // OUT - using 4 to 16 decoder
#define SIZE ROWS*COLS // size of the matrix
#define LAYERS 2

const uint8_t COLpins[COL_PINS] = {4,5,6,8}; // output (4 to 16 decoder)
const uint8_t ROWpins[ROWS] = {22,21,20,19,18}; // input
const uint8_t COLmap[COLS] = {10,9,8,7,6,5,4,3,2,1,0,11,12,13,14}; // mapping of physical pins to logical columns

enum KeyFunction : uint8_t {
  FN_NORM = 0,
  FN_SWITCH = 1,
  FN_MOUSE_BTN_LEFT = 2,
  FN_MOUSE_BTN_RIGHT = 3,
  FN_MOUSE_WHEEL = 4,
  FN_MOUSE_UP = 5, 
  FN_MOUSE_DOWN = 6, 
  FN_MOUSE_LEFT = 7, 
  FN_MOUSE_RIGHT = 8, 
  FN_MOUSE = 9
};

struct KeyInfo {
  KeyboardKeycode mod; 
  KeyboardKeycode key;
};

struct KeyRaw {
  KeyboardKeycode mod; 
  KeyboardKeycode key;
  KeyFunction function;

  bool isStandard() { return function==FN_NORM;}
  bool isFunction() { return !isStandard();}
  bool standardNonEmpty() { return isStandard() && (mod!=KEY_RESERVED || key!=KEY_RESERVED); }
  bool isMouseMove() { return function==FN_MOUSE_UP || function==FN_MOUSE_DOWN || function==FN_MOUSE_LEFT || function==FN_MOUSE_RIGHT;}
};

struct KeyConfig {
  uint8_t layer; 
  bool mouse;
  bool wheel;
};


const KeyInfo keyMap[ROWS*COLS*LAYERS] {
  {KEY_RESERVED,KEY_ESC},{KEY_RESERVED,KEY_1},{KEY_RESERVED,KEY_2},{KEY_RESERVED,KEY_3},{KEY_RESERVED,KEY_4},
    {KEY_RESERVED,KEY_5},{KEY_RESERVED,KEY_6},{KEY_RESERVED,KEY_7},{KEY_RESERVED,KEY_8},{KEY_RESERVED,KEY_9},
      {KEY_RESERVED,KEY_0},{KEY_RESERVED,KEY_MINUS},{KEY_RESERVED,KEY_EQUAL},{KEY_RESERVED,KEY_DELETE},{KEY_RESERVED,KEY_BACKSPACE},
  {KEY_RESERVED,KEY_TAB},{KEY_RESERVED,KEY_Q},{KEY_RESERVED,KEY_W},{KEY_RESERVED,KEY_E},{KEY_RESERVED,KEY_R},
    {KEY_RESERVED,KEY_T},{KEY_RESERVED,KEY_Y},{KEY_RESERVED,KEY_U},{KEY_RESERVED,KEY_I},{KEY_RESERVED,KEY_O},
      {KEY_RESERVED,KEY_P},{KEY_RESERVED,KEY_LEFT_BRACE},{KEY_RESERVED,KEY_RIGHT_BRACE},{KEY_RESERVED,KEY_BACKSLASH},{KEY_RESERVED,KEY_HOME},
  {KEY_RESERVED,KEY_CAPS_LOCK},{KEY_RESERVED,KEY_A},{KEY_RESERVED,KEY_S},{KEY_RESERVED,KEY_D},{KEY_RESERVED,KEY_F},
    {KEY_RESERVED,KEY_G},{KEY_RESERVED,KEY_H},{KEY_RESERVED,KEY_J},{KEY_RESERVED,KEY_K},{KEY_RESERVED,KEY_L},
      {KEY_RESERVED,KEY_SEMICOLON},{KEY_RESERVED,KEY_QUOTE},{KEY_RESERVED,KEY_ENTER},{KEY_RESERVED,KEY_END},{KEY_RESERVED,KEY_RESERVED},
  {KEY_LEFT_SHIFT,KEY_RESERVED},{KEY_RESERVED,KEY_RESERVED},{KEY_RESERVED,KEY_Z},{KEY_RESERVED,KEY_X},{KEY_RESERVED,KEY_C},
    {KEY_RESERVED,KEY_V},{KEY_RESERVED,KEY_B},{KEY_RESERVED,KEY_N},{KEY_RESERVED,KEY_M},{KEY_RESERVED,KEY_COMMA},
      {KEY_RESERVED,KEY_PERIOD},{KEY_RESERVED,KEY_SLASH},{KEY_RESERVED,KEY_UP_ARROW},{KEY_RESERVED,KEY_RESERVED},{KEY_RIGHT_SHIFT,KEY_RESERVED},
  {KEY_RESERVED,KEY_RESERVED},{KEY_LEFT_CTRL,KEY_RESERVED},{KEY_LEFT_WINDOWS,KEY_RESERVED},{KEY_LEFT_ALT,KEY_RESERVED},{KEY_RESERVED,KEY_SPACE},
    {KEY_RESERVED,KEY_SPACE},{KEY_RESERVED,KEY_SPACE},{KEY_RESERVED,KEY_SPACE},{KEY_RESERVED,KEY_SPACE},{KEY_RESERVED,KEY_SPACE},
      {KEY_RIGHT_ALT,KEY_RESERVED},{KEY_RESERVED,KEY_LEFT_ARROW},{KEY_RESERVED,KEY_DOWN_ARROW},{KEY_RESERVED,KEY_RIGHT_ARROW},{KEY_RIGHT_CTRL,KEY_RESERVED},

  {KEY_RESERVED,KEY_ESC},{KEY_RESERVED,KEY_F1},{KEY_RESERVED,KEY_F2},{KEY_RESERVED,KEY_F3},{KEY_RESERVED,KEY_F4},
    {KEY_RESERVED,KEY_F5},{KEY_RESERVED,KEY_F6},{KEY_RESERVED,KEY_F7},{KEY_RESERVED,KEY_F8},{KEY_RESERVED,KEY_F9},
      {KEY_RESERVED,KEY_F10},{KEY_RESERVED,KEY_F11},{KEY_RESERVED,KEY_F12},{KEY_RESERVED,KEY_DELETE},{KEY_RESERVED,KEY_BACKSPACE},
  {KEY_RESERVED,KEY_TAB},{KEY_RESERVED,KEY_Q},{KEY_RESERVED,KEY_W},{KEY_RESERVED,KEY_E},{KEY_RESERVED,KEY_R},
    {KEY_RESERVED,KEY_T},{KEY_RESERVED,KEY_Y},{KEY_RESERVED,KEY_U},{KEY_RESERVED,KEY_I},{KEY_RESERVED,KEY_O},
      {KEY_RESERVED,KEY_P},{KEY_RESERVED,KEY_LEFT_BRACE},{KEY_RESERVED,KEY_RIGHT_BRACE},{KEY_RESERVED,KEY_BACKSLASH},{KEY_RESERVED,KEY_HOME},
  {KEY_RESERVED,KEY_TILDE},{KEY_RESERVED,KEY_A},{KEY_RESERVED,KEY_S},{KEY_RESERVED,KEY_D},{KEY_RESERVED,KEY_F},
    {KEY_RESERVED,KEY_G},{KEY_RESERVED,KEY_H},{KEY_RESERVED,KEY_J},{KEY_RESERVED,KEY_K},{KEY_RESERVED,KEY_L},
      {KEY_RESERVED,KEY_SEMICOLON},{KEY_RESERVED,KEY_QUOTE},{KEY_RESERVED,KEY_ENTER},{KEY_RESERVED,KEY_INSERT},{KEY_RESERVED,KEY_RESERVED},
  {KEY_LEFT_SHIFT,KEY_RESERVED},{KEY_RESERVED,KEY_RESERVED},{KEY_RESERVED,KEY_Z},{KEY_RESERVED,KEY_X},{KEY_RESERVED,KEY_C},
    {KEY_RESERVED,KEY_V},{KEY_RESERVED,KEY_B},{KEY_RESERVED,KEY_N},{KEY_RESERVED,KEY_M},{KEY_RESERVED,KEY_COMMA},
      {KEY_RESERVED,KEY_PERIOD},{KEY_RESERVED,KEY_SLASH},{KEY_RESERVED,KEY_UP_ARROW},{KEY_RESERVED,KEY_RESERVED},{KEY_RIGHT_SHIFT,KEY_RESERVED},
  {KEY_RESERVED,KEY_RESERVED},{KEY_LEFT_CTRL,KEY_RESERVED},{KEY_LEFT_WINDOWS,KEY_RESERVED},{KEY_LEFT_ALT,KEY_RESERVED},{KEY_RESERVED,KEY_SPACE},
    {KEY_RESERVED,KEY_SPACE},{KEY_RESERVED,KEY_SPACE},{KEY_RESERVED,KEY_SPACE},{KEY_RESERVED,KEY_SPACE},{KEY_RESERVED,KEY_SPACE},
      {KEY_RIGHT_ALT,KEY_RESERVED},{KEY_RESERVED,KEY_LEFT_ARROW},{KEY_RESERVED,KEY_DOWN_ARROW},{KEY_RESERVED,KEY_RIGHT_ARROW},{KEY_RIGHT_CTRL,KEY_RESERVED}
};

struct KeyPos {
  uint8_t row; // ROW - input
  uint8_t col; // COL - output

  bool operator==(const KeyPos other) const { return (row == other.row && col == other.col);}
  uint8_t index() { return row*COLS+COLmap[col];}
  KeyRaw code(uint8_t layer) {
    KeyInfo info = keyMap[index()+layer*SIZE];
    return {info.mod,info.key,FN_NORM};
  }
  bool isLeftSpace() { return row==4 && COLmap[col]>=4 && COLmap[col]<=5;}
  bool isRightSpace() { return row==4 && COLmap[col]>=8 && COLmap[col]<=9;}
  bool isFn() { return row==4 && COLmap[col]==0;}
  bool isMouse() { return row==3 && COLmap[col]==1;}
  bool isWheel() { return row==3 && COLmap[col]==13;}
};
